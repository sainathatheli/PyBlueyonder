Django Templates And Static Files
---------------------------------
Django Templates:

It is not recommended to write html code inside python script (views.py file) 
because:
1) It reduces readability because Python code mixed with html code
2) No seperation of roles. Python developer has to concentrate on both python code and 
HTML Code.
3) It does not promote reusability of code

We can overcome these problems by seperating html code into a seperate html file.This 
html file is nothing but template.

From the Python file (views.py file) we can use these templates based on our 
requirement.

We have to write templates at project level only once and we can use these in multiple
applications.




templates:
---------
<!DOCTYPE html> 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title>First Template Page</title> 
<style > 
h1{ 
color:white; 
background: red; 
} 
</style> 
</head> 
<body> 
<h1>Hello Server Current Date and Time : <br> 
{{insert_date}} 
</h1> 
</body> 
</html>

view.py
-------
def wish(request):
    date=datetime.datetime.now()
    my_dict={'insert_date':date}
    return render(request,'wish.html',context=my_dict) 




Application To display date, time and student information:
===========================================================
views.py
--------

from django.shortcuts import render 

import datetime 
 
# Create your views here. 
def template_view(request): 
	dt=datetime.datetime.now() 
	name='SMITH' 
	rollno=101 
	marks=100 
	my_dict={'date':dt,'name':name,'rollno':rollno,'marks':marks} 
	return render(request,'results.html',my_dict) 

results.html:
-------------
<!DOCTYPE html> 
<html lang="en" dir="ltr"> 
<head> 
<title></title> 
<style> 
body{ 
background: green; 
color:white; 
} 
h1{ 
border:10px solid yellow; 
} 
</style> 
</head> 
<body> 
<h1>Hello this response from Template File.I will take care everything about pres
entation</h1><hr> 
<h2>The Server Date and Time is:{{date}}</h2> 
<ol> 
<li>Name:{{name}}</li> 
<li>Rollno:{{rollno}}</li> 
<li>Marks:{{marks}}</li> 
</ol> 
 
</body> 
</html> 



Working with Models and Databases:
----------------------------------
As the part of web application development, compulsory we required to interact with 
database to store our data and to retrieve our stored data.

Django provides a big in-built support for database operations. Django provides one 
inbuilt database sqlite3.

For small to medium applications this database is more enough. Django can provide 
support for other databases also like oracle, mysql,postgresql etc
Database Configuration:

Django by default provides sqlite3 database. If we want to use this database,we are 
not required to do any configurations.

The default sqllite3 configurations in settings.py file are declared as follows.
settings.py
1) DATABASES = { 
2) 'default': { 
3) 'ENGINE': 'django.db.backends.sqlite3', 
4) 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 
5) } 
6) } 


Model Class: 
============
A Model is a Python class which contains database information.
A Model is a single, definitive source of information about our data. It contains fields 
and behavior of the data what we are storing.

Each model maps to one database table. 
Every model is a Python class which is the child class of (django.db.models.Model)
Each attribute of the model represents a database field. 
We have to write all model classes inside ‘models.py’ file. 


models.py
from django.db import models 
 
# Create your models here. 
class Employee(models.Model): 
	eno=models.IntegerField() 
	ename=models.CharField(max_length=30) 
	esal=models.FloatField() 
	eaddr=models.CharField(max_length=30) 

Note: This model class will be converted into Database table. Django is responsible for 
this.

table_name: appName_Employee
fields: eno, ename, esal and eaddr. And one extra field: id
behaviors: eno is of type Integer, ename is of type Char and max_length is 30 characters. 
Hence, Model Class = Database Table Name + Field Names + Field Behaviors

Converting Model Class into Database specific SQL Code:
--------------------------------------------------------- 
Once we write Model class, we have to generate the corresponding SQL Code. 
For this, we have to use “makemigrations” command. 

add y

Python manage.py makemigrations 


How to see corresponding SQL Code of Migrations: 
--------------------------------------------------
To see the generated SQL Code, we have to use the following command “sqlmigrate”

python manage.py sqlmigrate testApp 0001

Note: Here 0001 is the file passed as an argument 

“id” field: 
1) For every table(model), Django will generate a special column named with “id”. 
2) ID is a Primary Key. (Unique Identifier for every row inside table is considered as a 
primary key).
3) This field(id) is auto increment field and hence while inserting data, we are not 
required to provide data for this field.
4) This id field is of type “AutoField”
5) We can override the behavior of “id” field and we can make our own field as “id”.
6) Every Field is by default “NOT NULL”.

How to execute generated SQL Code (migrate Command): 
----------------------------------------------------
After generating sql code, we have to execute that sql code to create table in database. 
For this, we have to use ‘migrate’ command. 

python manage.py migrate


How to Check created Table in Django admin Interface: 
-------------------------------------------------------
We have to register model class in ‘admin.py’ file. 

admin.py
--------
from django.contrib import admin 
from testApp.models import Employee 
 
# Register your models here. 
 
admin.site.register(Employee) 





Creation of Super User to login to admin Interface: 
---------------------------------------------------
We can create super user with the following command by providing username, mailid, 
password. 
python manage.py createsuperuser

We can login to admin interface → Start the server and login to admin interface using 
the created credentials. 

python manage.py runserver

Open the following in browser: http://127.0.0.1:8000/admin/









To Display Data in admin Interface in Browser: 

models.py
---------
from django.db import models 
 
# Create your models here. 
 
class Employee(models.Model): 
	eno=models.IntegerField() 
	ename=models.CharField(max_length=30) 
	esal=models.FloatField() 
	eaddr=models.CharField(max_length=30) 
	
	def __str__(self): 
		return 'Employee Object with eno: +str(self.no)' 

admin.py
--------
from django.contrib import admin 
from testApp.models import Employee 
 
#Register your models here. 
 
class EmployeeAdmin(admin.ModelAdmin): 
	list_display=['eno','ename','esal','eaddr'] 


admin.site.register(Employee,EmployeeAdmin) 

Note: 
------
We should do this registration in a single line otherwise we are getting error.
admin.site.register(Employee)
admin.site.register(EmployeeAdmin)

Views.py:
---------
from django.shortcuts import render 
from testApp.models import Employee 

# Create your views here. 
def empdata(request): 
	emp_list=Employee.objects.all() 
	my_dict={'emp_list':emp_list} 
	return render(request, 'emp.html', context=my_dict)


emp.html:
---------
<!DOCTYPE html> 
{% load static %} 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
<body> 
<h1> The employees list is : </h1> 
 
{% if emp %} 
<table> 
<thead> 
<th> eno </th> 
<th> ename </th> 
<th> esal </th> 
 <th> eaddr </th> 
 </thead> 

{% for e in emp %} 
<tr> 
<td> {{e.eno}}</td> 
<td>{{e.ename}}</td> 
<td>{{e.esal}}</td> 
<td> {{e.eaddr}}</td> 
</tr> 
{% endfor %} 
 
</table> 
{%else%} 
 <p> No records found </p> 
<p> No records found </p> 
{% endif %} 
 
</body> 
</html> 





Django Forms:
-------------
It is the very important concept in web development.
The main purpose of forms is to take user input.
Eg: login form, registration form, enquiry form etc

From the forms we can read end user provided input data and we can use that data 
based on requirement. We may store in the database for future purpose. We may use 
just for validation/authentication purpose etc

Here we have to use Django specific forms but not HTML forms.

Advantages of Django Forms over HTML Forms:
1) We can develop forms very easily with python code
2) We can generate HTML Form widgets/components (like textarea, email, pwd etc) very quickly
3) Validating data will become very easy
4) Processing data into python data structures like list, set etc will become easy
5) Creation of Models based on forms will become easy etc.

Process to generate Django Forms:
--------------------------------
Step-1: Creation of forms.py file in our application folder with our required fields.

forms.py:
---------
from django import forms 
class StudentForm(forms.Form): 
	name=forms.CharField() 
	marks=forms.IntegerField() 


Note: name and marks are the field names which will be available in html form

Step-2: usage of forms.py inside views.py file:
----------------------------------------------
views.py file is responsible to send this form to the template html file
--------------------
views.py:

from django.shortcuts import render 
from . import forms 
 
# Create your views here. 
def studentinputview(request): 
	form=forms.StudentForm() 
	my_dict={'form':form} 
 	return render(request,'input.html',context=my_dict)

Note: context parameter is optional.We can pass context parameter value directly 
without using keyword name 'context'

Step-3: Creation of html file to hold form:
Inside template file we have to use template tag to inject form {{form}}
It will add only form fields. But there is no <form> tag and no submit button.
Even the fields are not arranged properly

input.html:
------------
<!DOCTYPE html> 
{%load static%} 
<html lang="en"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
</head> 
<body> 
<h1>Registration Form</h1> 
<div class="container" align="center"> 
<form method="post"> 
{{form.as_p}} 
<input type="submit" class="btn btn-primary" name="" value="Submit"> 
</form> 
</div> 
</body> 
</html> 




If we submit this form we will get 403 status code response
Forbidden (403)
CSRF verification failed. Request aborted.
Help
Reason given for failure:
CSRF token missing or incorrect.

CSRF (Cross Site Request Forgery) Token:
--------------------------------------
Every form should satisfy CSRF (Cross Site Request Forgery) Verification, otherwise 
Django won't accept our form.It is meant for website security. 
Being a programmer we are not required to worry anything about this. 
Django will takes care everything.But we have to add csrf_token in our form


<h1>Registration Form</h1> 
<div class="container" align="center"> 
<form method="post"> 
{{form.as_p}} 
{% csrf_token %} 
<input type="submit" class="btn btn-primary" name="" value="Submit"> 
</form> 
</div> 

If we add csrf_token then in the generate form the following hidded field will be 
added,which makes our post request secure

<input type='hidden' name='csrfmiddlewaretoken'
value='1ZqIJJqTLMVa6RFAyPJh7pwzyFmdiHzytLxJIDzAkKULJz4qHcetLoKEsRLwyz4h'/>

The value of this hidden field is keep on changing from request to request.Hence it is 
impossible to forgery of our request.

If we configured csrf_token in html form then only django will accept our form.


How to process Input Data from the form inside views.py File:
==============================================================
We required to modify views.py file. The end user provided input is available in a 
dictionary named with 'cleaned_data'

views.py:
------------
from django.shortcuts import render 
from . import forms 
 
# Create your views here. 
def studentinputview(request): 
	form=forms.StudentForm() 
	if request.method=='POST': 
		form=forms.StudentForm(request.POST) 
	if form.is_valid(): 
		print('Form validation success and printing data') 
		print('Name:',form.cleaned_data['name']) 
		print('Marks:',form.cleaned_data['marks']) 
		return render(request,'input.html',{'form':form})



Student FeedBack Form Project
------------------------------
forms.py:

from django import forms 
class FeedBackForm(forms.Form): 
   name=forms.CharField() 
   rollno=forms.IntegerField() 
   email=forms.EmailField()
   feedback=forms.CharField(widget=forms.Textarea)


views.py:
---------
from django.shortcuts import render 
from import forms
 
def feedbackview(request): 
	form=forms.FeedBackForm() 
	if request.method=='POST': 
	form=forms.FeedBackForm(request.POST) 
	if form.is_valid(): 
		print('Form Validation Success and printing information') 
		print('Name:',form.cleaned_data['name']) 
		print('Roll No:',form.cleaned_data['rollno']) 
		print('Email:',form.cleaned_data['email']) 
		print('FeedBack:',form.cleaned_data['feedback']) 
	return render(request,'feedback.html',{'form':form})


feedBack.html:
---------------
<!DOCTYPE html> 
{% load static %} 

<html lang="en"> 
<head> 
<meta charset="utf-8"> 
<title>StudentFeedBackForm</title> 
</head> 
<body> 
<div class="container" align='center'> 
<h1>Student Feedback Form</h1><hr> 
<form class="" action="index.html" method="post"> 
{{form.as_p}} 
{% csrf_token %} 
<input type="submit" class="btn btn-primary" value="Submit Feedback"> 
</form> 
</div> 
</body> 
</html> 






Form Validations:
-----------------
Once we submit the form we have to perform validations like 
1) Length of the field should not be empty
2) The max number of characters should be 10
3) The first character of the name should be 'd' etc

We can implement validation logic by using the following 2 ways.
1) Explicitly by the programmer by using clean methods
2) By using Django inbuilt validators

Note: All validations should be implemented in the forms.py file


Explicitly by the Programmer by using Clean Methods:
----------------------------------------------------
1)The syntax of clean method: clean_fieldname(self)

2)In the FormClass for any field if we define clean method then at the time of submit the 
form, Django will call this method automatically to perform validations. 

If the clean method won't raise any error then only form will be submitted.

The returned value of clean method will be considered by Django at the time of 
submitting the form.

from django import forms 
from django.core import validators 

class FeedBackForm(forms.Form): 
 name=forms.CharField() 
 rollno=forms.IntegerField() 
 email=forms.EmailField() 
 feedback=forms.CharField(widget=forms.Textarea) 

def clean_name(self): 
    print('validating name') 
    inputname=self.cleaned_data['name'] 
    if len(inputname) < 4: 
   raise forms.ValidationError('The Minimum no of characters in the name field
     should be 4') 
    return inputname+'rajy' 

def clean_rollno(self): 
inputrollno=self.cleaned_data['rollno'] 
print('Validating rollno field') 
return inputrollno 

 def clean_email(self):
    inputemail=self.cleaned_data['email'] 
    print('Validating email field') 
    return inputemail 
 def clean_feedback(self):
    inputfeedback=self.cleaned_data['feedback'] 
    print('Validating feedback field') 
    return inputfeedback 



forms.py:
---------
from django import forms 
from django.core import validators 
 
class FeedBackForm(forms.Form): 
name=forms.CharField() 
rollno=forms.IntegerField() 
email=forms.EmailField() 
feedback=forms.CharField(widget=forms.Textarea) 
 
def clean(self): 
	print('Total Form Validation...') 
	total_cleaned_data=super().clean() 
	
	inputname=total_cleaned_data['name'] 
	if inputname[0].lower() != 'd': 
		raise forms.ValidationError('Name parameter should starts with d') 
	inputrollno=total_cleaned_data['rollno'] 
	if inputrollno <=0: 
		raise forms.ValidationError('Rollno should be > 0') 






Note: 
------
1) Django will call these filed level clean methods automatically and we are not required 
to call explicitly.
2) Form validation by using clean methods is not recommended.


Django's Inbuilt Core Validators:
==================================
Django provides several inbuilt core validators to perform very common validations. 
We can use these validators directly and we are not required to implement.

Django's inbuilt validators are available in the django.core module
from django.core import validators

To validate Max number of characters in the feedback as 40,we have to use inbuilt 
validators as follows

 from django import forms 
 from django.core import validators 

class FeedBackForm(forms.Form): 
 name=forms.CharField() 
 rollno=forms.IntegerField() 
 email=forms.EmailField() 
 feedback=forms.CharField(widget=forms.Textarea,validators=
[validators.MaxLengthValidator(40)]) 

Note:
-----
We can use any number of validators for the same field
feedback = forms.CharField(widget = forms.Textarea,validators = 
[validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])


Note: Usage of built in validators is very easy when compared with clean methods.

Use Case: Custom validators(user defined message):
--------------------------------------------------
How to implement Custom Validators by using the same Validator Parameter:
-------------------------------------------------------------------------
The value of name parameter should starts with 'd' or 'D'. We can implement this 
validation as follows:

def starts_with_d(value): 
	if value[0].lower() != 'd': 
	raise forms.ValidationError('Name should be starts with d | D') 

class FeedBackForm(forms.Form): 
	name=forms.CharField(validators=[starts_with_d]) 
	rollno=forms.IntegerField() 







Model Forms
-----------
Model Forms (Forms based on Model):

Sometimes we can create form based on Model, such type of forms are called model 
based forms or model forms.

The main advantage of model forms is we can grab end user input and we can save 
that input data very easily to the database.

Django provides inbuilt support to develop model based forms very easily


How to develop Model based Forms:
----------------------------------
1) While develop FormClass instead of inheriting forms.Form class,we have to inherit 
forms.ModelForm class.
 class RegisterForm(forms.ModelForm):
 
2) We have to write one nested class (Meta class) to specify Model information and 
required fields.

class RegisterForm(forms.ModelForm):
 # field declarations if we are performing any custom validations.If we are not defining 
  any custom validations then here we are not required to specify any field.

class Meta:
 # we have to specify Model class name and requied fields
 model=Student
 fields='__all__'

Case-1: 
-------
Instead of all fields if we want only selected fields, then we have to specify as follows

class Meta:
 	model=Student
 	fields=('field1','field2','field3')
In the form only 3 fields will be considered. 

If Model class contains huge number of fields and we required to consider very less 
number of fields in the form then we should use this approach.

Case-2:
-------
Instead of all fields if we want to exclude certain fields,then we have to specify as follows

class Meta:
 model=Student
 exclude=['field1','field2']

In the form all fields will be considered except field1 and field2.

If the Model class contains huge number of fields and if we want to exclude very few fields 
then we have to use this approach.

How to Save User's Input Data to Database in Model based Forms:
==================================================================
We have to use save() method.

def student_view(request):
 ...
 if request.method=='POST':
 	form=RegisterForm(request.POST)
	if form.is_valid():
 	form.save(commit=True)




studentProject:
----------------
create studApp

models.py:
---------
from django.db import models

# Create your models here.
class Student(models.Model):
    name=models.CharField(max_length=30) 
    marks=models.IntegerField()


admin.py:
----------
from django.contrib import admin
from studApp.models import Student
# Register your models here.


admin.site.register(Student)

add the  your studApp app in setting.py installed[] 

Python manage.py makemigrations

python manage.py sqlmigrate studApp 0001

Python manage.py migrate



forms.py:
---------
from django import forms 
from studApp.models import Student

class StudentForm(forms.ModelForm): 
 #fields with validations
    class Meta:
        model=Student
        fields='__all__'


views.py:
---------
from django.shortcuts import render
from . import forms 

# Create your views here. 
def student_view(request):
    form=forms.StudentForm 
    if request.method=='POST':
        form=forms.StudentForm(request.POST)
        if form.is_valid():
            form.save()
    return render(request,'input.html',{'form':form})




input.html:
------------
<!DOCTYPE html> 
{%load static%} 
<html lang="en"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
</head> 
<body> 
<h1>Registration Form</h1> 
<div class="container" align="center"> 
<form method="post"> 
{{form.as_p}}
{% csrf_token %} 
<input type="submit" class="btn btn-primary" name="" value="Submit"> 
</form> 
</div> 
</body> 
</html> 

Example:
---------

movieproject:
---------------
create movieApp

models.py:
---------
from django.db import models  
# Create your models here. 

class Movie(models.Model): 
	rdate=models.DateField() 
	moviename=models.CharField(max_length=30) 
	hero=models.CharField(max_length=30) 
	heroine=models.CharField(max_length=30) 
	rating=models.IntegerField()


admin.py:
---------
from django.contrib import admin 
from movieApp.models import Movie 
# Register your models here. 

admin.site.register(Movie)

forms.py:
---------
from django import forms 
from .models import Movie 
class MovieForm(forms.ModelForm): 
	class Meta: 
	model=Movie 
	fields='__all__' 

views.py:
--------
from django.shortcuts import render 
from movieApp.forms import MovieForm 
from movieApp.models import Movie 

# Create your views here. 

def index_view(request): 
return render(request,'index.html') 
 
def add_movie_view(request): 
	form=MovieForm() 
	if request.method=='POST': 
		form=MovieForm(request.POST) 
		if form.is_valid(): 
			form.save() 
		return index_view(request) 
	return render(request,'addmovie.html',{'form':form}) 
 
def list_movie_view(request):
	movies_list=Movie.objects.all().order_by('-rating') 
	return render(request,'listmovie.html',{'movies_list':movies_list})


urls.py
-------
from movieApp imports views
urlspatterns=[
   path('',views.index_view),
   path('addmovie/',views.add_movie_view),
   path('listmovies/',views.list_movie_view)

]


index.html:
-----------

<!DOCTYPE html> 
{%load static%} 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8">
<title></title> 

<link rel="stylesheet" href="{% static "css/movie.css"%}">
<link href="https://fonts.googleapis.com/css?family=Merriweather" rel="stylesh
eet"> 
</head> 
<body> 
<div class="container" align="center"> 
<div class="jumbotron"> 
<h1>Prasad Movies...</h1> 
<p>up to date movies information</p> 
<a class="btn btn-primary btn-lg" href="/addmovie" role="button">Add Movie</a> 
<a class="btn btn-primary btn-lg" href="/listmovies" role="button">List Movies</a> 
</div> 
</div> 
</body> 
</html>


listmovie.html:
---------------
<!DOCTYPE html> 
{% load cust_filters %} 
{%load staticfiles%} 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 

<link rel="stylesheet" href="{% static "css/movie.css"%}"> 
<link href="https://fonts.googleapis.com/css?family=Merriweather"
rel="stylesheet"> 
</head> 
<body> 
<h1>Movies Information</h1> 
{% if movies_list %} 
<table> 
<thead> 
<th>Released Date</th> 
<th>Movie Name</th> 
<th>Hero</th> 
<th>Heroine</th> 
<th>Rating</th> 
</thead>
{% for movie in movies_list%} 
<tr> 
<td>{{movie.rdate}}</td> 
<td>{{movie.moviename}}</td>
<td>{{movie.hero}}</td> 
<td>{{movie.heroine}}</td> 
<td>{{movie.rating}}</td> 
</tr> 
{% endfor %} 
</table> 
{% else %} 
<p>No Movies Found</p> 
{%endif%} 
</body> 
</html>


addmovie.html:
---------------
<!DOCTYPE html> 
{%load static%} 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
 
<link rel="stylesheet" href="{% static "css/movie.css"%}"> 
<link href="https://fonts.googleapis.com/css?family=Merriweather"
rel="stylesheet"> 
</head> 
<body> 
<div class="container" align='center'> 
<h1>Add Movie Information</h1><hr> 
<form method="post"> 
{{form.as_p}} 
{%csrf_token%} 
<input type="submit" class='btn btn-primary' value="Add Movie"> 
</form> 
</div> 
</body> 
</html>

movie.css
---------
body{ 
background: url(); 
/* background-repeat: no-repeat;
 background-size: cover; */ 
} 
.container .jumbotron{ 
margin-top:200px; 
background: orange; 
color:white; 
font-family: 'Merriweather', serif; 
} 
table,tr,td,thead,th{ 
border:2px solid white; 
font-size: 30px; 
color:white; 
background:red; 
margin:auto; 
} 
thead,th{ 
border:2px solid red; 
font-size: 30px; 
color:blue; 
margin:auto; 
background:yellow; 
)} 
h1{ 
text-align: center; 
} 


Advanced Templates:
-------------------
1) Template Inheritance
2) Template Filters
3) Template tags for relative URLs

1)Template Inheritance:

If multiple template files have some common code,it is not recommended to write 
that common code in every template html file. It increases length of the code and 
reduces readability. It also increases development time.

We have to seperate that common code into a new template file,which is also known 
as base template. The remaining template files should required to extend base 
template so that the common code will be inherited automatically.

Inheriting common code from base template to remaining templates is nothing but 
template inheritance.
How to implement Template Inheritane:

base.html:
-----------
1) <!DOCTYPE html> 
2) html,css,bootstrap links 
3) <body> 
4) common code required for every child tempalte 

5) {% block child_block%} 
6) Anything outside of this block available to child tag. 
7) in child template the specific code should be in this block 
8) {%endblock%} 


9) </body> 
10) </html> 

child.html
----------
1) <!DOCTYPE html> 
2) {% extends 'base.html'%} 
3) {% block child_block %} 
4) child specific extra code 
5) {%endblock%} 


Advantages of Template Inheritance:
-----------------------------------
1) What ever code available in base template is by default available to child templates 
and we are not required to write again.Hence it promotes Code Reusability (DRY).
2) It reduces length of the code and improves readability.
3) It reduces development time.
4) It provides unique and same look and feel for total web application

Note: Based on our requirement we can extend any number of base templates.i.e 
Multiple Inheritance is applicable for templates.

How to Add Seperate CSS Files to Child Templates?

base.html
---------
<!DOCTYPE html> 
{%load static %} 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

<link rel="stylesheet" href="{% static 'css/advtempot.css'%}"> 
{% block xyz %}{% endblock %} 
</head> 
<body> 
<nav class="navbar navbar-default navbar-inverse"> 
<div class="container"> 
<!-- Brand and toggle get grouped for better mobile display --> 
<div class="navbar-header"> 
<a class="navbar-brand" href="/">RAJ NEWS</a> 
</div> 
<ul class="nav navbar-nav"> 
<li><a href="/">Home</a></li> 
<li><a href="/movies">Movies</a></li> 
<li><a href="/sports">Sports</a></li> 
<li><a href="/politics">Politics</a></li> 
</ul> 
</div><!-- /.container-fluid --> 
</nav> 
{% block body_block %} 
{% endblock %} 
</body> 
</html> 

child.html:
-----------
<!DOCTYPE html> 
{% extends 'base.html'%} 
{%load static %} 
{% block xyz %} 
<link rel="stylesheet" href="{%static 'css/new.css' %}"> 
{%endblock%} 
{% block body_block %} 
<h1>Welcome to NEWS PORTAL</h1> 
{% endblock %}


2)Tempalte Filters:
-------------------
In the template file, the injected data can be displayed by using template tags.

{{emp.eno}}

Before displaying to the end user if we want to perform some modification to the 
injected text, like cut some information or converting to title case etc, then we should 
go for Template filters.

Syntax of Template Filter: {{value|filtername:"argument"}}

Filter may take or may not take arguments.i.e arguments are optional.
Eg:

<li>{{msg1|lower}}</li>
 msg1 will be displayed in lower case
<li>{{msg3|add:RAJU"}}</li>
 "RAJU" will be added to msg3 and then display the result to the end user
{{ msg|title }}

{{ my_date|date:"Y-m-d" }}

Note: There are tons of built in filters are available.
https://docs.djangoproject.com/en/2.1/ref/templates/builtins/#ref-templates-builtinsfilters

How to Create our own Filter:
-----------------------------
Based on our requirement we can create our own filter.

Steps:
1) Create a folder 'templatetags' inside our application folder.

2) Create a special file named with __init__.py inside templatetags folder, so that Django 
will consider this folder as a valid python package

3) Create a python file inside templatetags folder to define our own filters
 cust_filters.py -->any name

cust_filters.py
---------------
from django import template 
register=template.Library() 
 
def first_eight_upper(value): 
 	result=value[:8].upper() 
	return result 

register.filter('f8upper',first_eight_upper) 






Note: 
We can also register filter with the decorator as follows.


from django import template 
register=template.Library() 

@register.filter(name='f8upper') 
def first_eight_upper(value): 
	result=value[:8].upper() 
	return result 


f8upper is the name of the filter which can be used inside template file.

4) Inside template file we have to load the filter file as follows(In the child template 
bunot in base template) {% load cust_filters %}

5) We can invoke the filter as follows {{msg|f8upper}



Complete Application (curd operation using Function Based View):
================================================================
create project empPro
create app as testapp

register the testapp in setting.py (INSTALLED_DIRS)

model.py
----------------
from django.db import models

# Create your models here.

class Employee(models.Model):
    eno=models.IntegerField() 
    ename=models.CharField(max_length=64) 
    esal=models.FloatField() 
    eaddr=models.CharField(max_length=256)



admin.py
--------
from django.contrib import admin
from testapp.models import Employee
# Register your models here.

 # Register your models here. 
class EmployeeAdmin(admin.ModelAdmin): 
	list_display=['eno','ename','esal','eaddr'] 

admin.site.register(Employee,EmployeeAdmin)


forms.py
--------
from django import forms 
from testapp.models import Employee

class EmployeeForm(forms.ModelForm): 
	class Meta:
		model=Employee
		fields='__all__'


view.py
------
from django.shortcuts import render,redirect 
from testapp.forms import EmployeeForm 
from testapp.models import Employee 

# Create your views here. 
def show_view(request): 
    employees=Employee.objects.all()
    return render(request,'index.html',{'employees':employees}) 

def insert_view(request): 
    form=EmployeeForm()
    if request.method=='POST': 
        form=EmployeeForm(request.POST)
        if form.is_valid():
            form.save() 
        return redirect('/') 
    return render(request,'insert.html',{'form':form})

def delete_view(request,id):
    employee=Employee.objects.get(id=id)
    employee.delete()
    return redirect('/') 

def update_view(request,id):
    employee=Employee.objects.get(id=id)
    if request.method=='POST':
        form=EmployeeForm(request.POST,instance=employee)
        if form.is_valid():
            form.save()
        return redirect('/') 
    return render(request,'update.html',{'employee':employee})

urls.py
--------
from django.contrib import admin
from django.urls import path
from testapp import views
import re
urlpatterns = [
  path('admin/', admin.site.urls),
  path('', views.show_view), 
  path('insert/', views.insert_view), 
  path('delete/<int:id>', views.delete_view), 
  path('update/<int:id>', views.update_view)
]

base.html:
----------
<!DOCTYPE html>
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
<!-- Latest compiled and minified CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
</head> 
<body> 
<div class="container" align='center'> 
{% block body_block %} 
{% endblock %} 
</div> 
</body> 
</html> 

index.html:
------------
<!DOCTYPE html> 
{% extends 'base.html' %} 
{% block body_block %} 
<h1>Employee Information Dash Board</h1><hr> 
<table border='2'> 
<thead> 
<th>Employee Number</th> 
<th>Employee Name</th> 
<th>Employee Salary</th> 
<th>Employee Address</th> 
<th>Actions</th> 
</thead> 
{% for emp in employees %} 
<tr>
    <td>{{emp.eno}}</td> 
<td>{{emp.ename}}</td> 
<td>{{emp.esal}}</td> 
<td>{{emp.eaddr}}</td> 
<td> 
<a href="/update/{{emp.id}}">Update</a> 
<a href="/delete/{{emp.id}}">Delete</a> 
</td> 
</tr> 
{%endfor%} 
</table><br><br><br> 
<a href="/insert" class='btn btn-primary btn-lg'> 
Do You Want to Insert New Employee</a> 
{% endblock %}


insert.html:
------------
<!DOCTYPE html> 
{% extends 'base.html' %} 
{% block body_block %} 
<h1>Employee Insert Form</h1><hr> 
<form method="post"> 
<table border='1'> 
{{ form.as_p}}
</table> 
{% csrf_token %} 
<br> 
<input type="submit" class='btn btn-success btn-lg' value="Insert Record"> 
</form> 
{% endblock %}


update.html
-----------
<!DOCTYPE html> 
{% extends 'base.html' %} 
{% block body_block %} 
<h1>Employee Update Form</h1><hr> 

<form method="post"> 
    {%csrf_token%} 
    Employee Number: <input type="text" name="eno" value="{{employee.eno}}">
    <p></p> 
    Employee Name: <input type="text" name="ename" value="{{employee.ename}}"
    ><p></p> 
    Employee Salary: <input type="text" name="esal" value="{{employee.esal}}">
    <p></p> 
    Employee Address: <input type="text" name="eaddr" value="{{employee.eaddr}}"
    > <p></p> 
    <input type="submit" class='btn btn-warning btn-lg' value="Update Record"> 
</form> 

{% endblock %}



Class Based Views (CBVs):
--------------------------
There are 2 types of views
1) Function Based Views
2) Class Based Views

Note:
1) Class Based Views introduced in Django 1.3 Version to implement Generic Views.

2) When compared with Function Based views,class Based views are very easy to use.
   Hence Class Based Views are Most frequently used views in real time.

3) Interanally Class Based Views will be converted into Function Based Views.Hence Class 
   Based Views are simply acts as wrappers to the Function based views to hide complexity.

4) Function Based views are more powerful when compared with Class Based Views.

Q) Explain the Sceneario where we should use Function based Views only and 
 we cannot use Class based Views?

For simple operations like listing of all records or display details of a particular record 
then we should go for Class Based Views.

For complex operations like handling multiple forms simulataneously then we should 
go for Function Based Views.



views.py:
----------
from django.views.generic import View 
from django.http import HttpResponse 
 
# Create your views here. 
class HelloWorldView(View): 
	def get(self,request): 
	return HttpResponse('<h1>This is from ClassBasedView</h1>') 




urls.py
--------
from testApp import views 
urlpatterns = [ 

path('hw/',views.HelloWorldView.as_view()), 
]


Note:
----
1) While defining Class Based Views we have to extend View class.

2) To provide response to GET request, Django will always call get() method.
    Hence we have to override this method to provide response to the GET request.
   Similarly for other HTTP Methods also like POST,HEAD etc

3) While defining url pattern we have to use as_view() method


Template Based Application by using Class Based Views:
--------------------------------------------------------
class TemplateCBV(TemplateView)
	template_name = 'home.html'

How to send Context Paramters:
-------------------------------
class TemplateCBV(TemplateView)
	template_name = 'home.html'

	def get_context_data(self,**kwargs):
 		context = super().get_context_data(**kwargs)
 		context['name'] = 'Bluey'
 		context['age'] = 30
 		return context

In template file we can access context parameters as follows
{{name}}
{{age}}






ListView:
---------
We can use ListView class to list out all records from database table(model).
It is alternative to ModelClassName.objects.all()

models.py
--------
from django.db import models 
 
# Create your models here. 
class Book(models.Model): 
	title=models.CharField(max_length=300) 
	author=models.CharField(max_length=30)
	pages=models.IntegerField() 	
	price=models.FloatField() 


admin.py:
----------
from django.contrib import admin 
from testapp.models import Book

# Register your models here. 
class BookAdmin(admin.ModelAdmin): 
	list_display=['title','author','pages','price'] 
 	admin.site.register(Book,BookAdmin)

views.py
--------
from testapp.models import Book 
from django.views.generic import ListView 
 
# Create your views here. 
class BookListView(ListView): 
	model=Book 


How to create Template File for ListView:
-----------------------------------------
Django will identify template automatically and we are not required to configure 
anywhere. 
But Django will always search for template file with the name
modelclassname_list.html like book_list.html

Django will always search for template file in the following location.
projectname/appname/templates/appname/
Eg: xxx/xxx/templates/testApp/book_list.html

Note: bydefault django will provide context object to the template file with the 
name: modelclassname_list

Eg: book_list


book_list.html:
---------------
<!DOCTYPE html> 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
</head> 
<body> 
<h1>All Books Information</h1><hr> 
{% for book in book_list %} 
<ul> 
<li> <strong>Title</strong>:{{book.title}}</li> 
<li> <strong>Author</strong>:{{book.author}}</li> 
<li> <strong>Pages</strong>:{{book.pages}}</li> 
<li> <strong>Price</strong>:{{book.price}}</li> 
</ul>  <hr> 
{% endfor %} 
</body> 
</html>

How to provide our own Context Object Name:
-------------------------------------------
The default context object name is: modelclassname_list

But we can customize this name based on our requirement as follows

class BookListView(ListView):
 	context_object_name = 'books'
 	model = Book

How to configure our own Template File at Project Level:
--------------------------------------------------------
ofcourse this approach is not recommended

class BookListView(ListView):
 	context_object_name = 'books'
 	model = Book
 	template_name = 'testapp/bluey.html


DetailView:
-------------
We can use ListView to list of all records present in the database table.
But to get details of a particular record, we should go for DetailView.

models.py
---------
from django.db import models 

class Company(models.Model): 
	name=models.CharField(max_length=128) 
	location=models.CharField(max_length=64) 
	ceo=models.CharField(max_length=64)


admin.py
--------
from django.contrib import admin 
from testapp.models import Company 
 
# Register your models here. 

class CompanyAdmin(admin.ModelAdmin): 
	list_display=['name','location','ceo'] 

admin.site.register(Company,CompanyAdmin)


views.py
---------
from django.shortcuts import render 
from testapp.models import Company 

from django.views.generic import ListView,DetailView 
 
# Create your views here. 
class CompanyListView(ListView): 
	model=Company 
	#default template_name is company_list.html 
 	#defult context_object_name is company_list 
 
class CompanyDetailView(DetailView): 
	model=Company 
	#default template_name is company_detail.html 
	#defult context_object_name is company or object


base.html
==========
<!DOCTYPE html> 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
<!-- Latest compiled and minified CSS --> 
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/cs
s/bootstrap.min.css" integrity="sha384-
BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" c
rossorigin="anonymous"> 
</head> 
<body> 
 <div class="container" > 
{%block body_block%} 
 {%endblock %} 
</div> 
</body> 
</html> 



company_list.html
-----------------
<!DOCTYPE html> 
{%extends 'testapp/base.html'%} 
{%block body_block%} 
<h1>List of All Companies</h1><hr> 
<ol> 
{%for company in company_list%} 
 <h2><li> <a href="/{{company.id}}">{{company.name|upper}}</a> </li></h2>
{%endfor%} 
</ol> 
{%endblock %}  


company_detail.html
-------------------
<!DOCTYPE html> 
{%extends 'testapp/base.html'%} 
 {%block body_block%} 
<h1>Company Information</h1><hr> 
<ol> 
<h2><li>Company Name: {{company.name|upper}}</li></h2> 
<h2><li>Company Location: {{company.location|title}}</li></h2> 
<h2><li>Company CEO: {{company.ceo|title}}</li></h2> 
</ol> 
{%endblock %}

urls.py:
--------

urlpatterns = [ 
path('^admin/', admin.site.urls), 
url('^companies/', views.CompanyListView.as_view()), 
url('^(?P<pk>\d+)/$', views.CompanyDetailView.as_view()), 
]




By using the following ClassBased Views we can perform CRUD operations very easily.
-----------------------------------------------------------------------------------
ListView, DetailView  Retrieve Operation
CreateView  Create Operation (Insert Data)
UpdateView  Update Operation
DeleteView  Delete Operation

CreateView Class:

We can use this CreateView class to insert data into our models.
views.py
---------
class CompanyCreateView(CreateView): 
	model=Company 

urls.py
--------
urlpatterns = [ 
path('^admin/', admin.site.urls), 
path('^companies/', views.CompanyListView.as_view()), 
path('^(?P<pk>\d+)/$', views.CompanyDetailView.as_view(),name='detail'), 
path('^create/', views.CompanyCreateView.as_view(),name='create')
]


If we send Request:
-------------------
ImproperlyConfigured at /create/
Using ModelFormMixin (base class of CompanyCreateView) without the 'fields' attribute 
is prohibited.

We can solve this problem by defining fields attribute in CreateView class
class CompanyCreateView(CreateView):
 model = Company
 fields = ('name','location','ceo')

If we send Request:
TemplateDoesNotExist at /create/testapp/company_form.html

By default CreateView class will always search for template file named with modelclassname_form.html
Eg: company_form.html


company_form.html:
------------------
<!DOCTYPE html> 
{% extends 'testapp/base.html' %} 
{% block body_block %} 
<h1>Company Create Form</h1><hr> 
<form method="post"> 
{{ form.as_p }} 
{% csrf_token %} 
<input type="submit" class='btn btn-primary btn-lg' value="Insert Record"> 
</form> 
{% endblock %} 


If we fill form and submit:
---------------------------
ImproperlyConfigured at /create/
No URL to redirect to. Either provide a URL or define a get_absolute_url method on the Model.

How to define get_absolute_url() in Model class:
------------------------------------------------

from django.db import models 
from django.core.urlresolvers import reverse 
 
# Create your models here. 
class Company(models.Model): 
name=models.CharField(max_length=128) 
location=models.CharField(max_length=64) 
ceo=models.CharField(max_length=64) 

def __str__(self): 
 return self.name 

def get_absolute_url(self): 
return reverse('detail',kwargs={'pk':self.pk}) 





UpdateView class:
-----------------
We can use UpdateView to update existing record.
views.py
---------
class CompanyUpdateView(UpdateView): 
	model=Company 
	fields=('name','ceo')
	success_url=reverse_lazy('/companies') 


Add Update Button in Details Page
------------------------------------
company_detail.html

<!DOCTYPE html> 
{%extends 'testapp/base.html'%} 
{%block body_block%} 
<h1>Company Information</h1><hr> 
<ol> 
<h2><li>Company Name: {{company.name|upper}}</li></h2> 
<h2><li>Company Location: {{company.location|title}}</li></h2> 
<h2><li>Company CEO: {{company.ceo|title}}</li></h2> 
</ol> 
<a href="/update/{{company.id}}" class='btn btn-warning'>Update</a> 
{%endblock %}


DeleteView class:
-------------------
We can use DeleteView to delete records

views.py
--------
from django.core.urlresolvers import reverse_lazy 
class CompanyDeleteView(DeleteView): 
	model=Company 
	success_url=reverse_lazy('/companies') 

note:
-----
success_url represents the target page which should be displayed after delete.
reverse_lazy() function will wait until deleting the record.

urls.py
--------
path('^delete/(?P<pk>\d+)/$', views.CompanyDeleteView.as_view(),name='delete')

http://localhost:8000/delete/7
TemplateDoesNotExist at /delete/7/
testapp/company_confirm_delete.html

If we are trying to delete, then DeleteView will provide confirmation template.

The default template name is model_confirm_delete.html

Eg: company_confirm_delete.html

We have to provide this template file.

company_confirm_delete.html:
----------------------------

<!DOCTYPE html> 
{%extends 'testapp/base.html'%} 
{%block body_block%} 
<h1>Delete {{company.name}} ???</h1><hr> 
<form method="post"> 
{%csrf_token%} 
<input type="submit" class='btn btn-danger' value="Delete Record"> 
<a href="/{{company.id}}" class='btn btn-success'>Cancel</a> 
</form> 
{%endblock %}


To Place Delete Button on Details Page
---------------------------------------
<!DOCTYPE html>
 {%extends 'testapp/base.html'%} 
{%block body_block%} 
<h1>Company Information</h1><hr> 
<ol> 
<h2><li>Company Name: {{company.name|upper}}</li></h2> 
<h2><li>Company Location: {{company.location|title}}</li></h2> 
<h2><li>Company CEO: {{company.ceo|title}}</li></h2> 
</ol> 
1<a href="/update/{{company.id}}" class='btn btn-warning'>Update</a> 
<a href="/delete/{{company.id}}" class='btn btn-danger'>Delete</a> 

{%endblock %}


Django Class Based Views Complete Example(curd):
------------------------------------------
create a project companyPro
create a application as testapp 


model.py:
---------

from django.db import models 
from django.urls import reverse
 
# Create your models here. 
class Company(models.Model):
    name=models.CharField(max_length=128)
    location=models.CharField(max_length=64)
    ceo=models.CharField(max_length=64)

def __str__(self): 
    return self.name 

def get_absolute_url(self):
    return reverse('detail',kwargs={'pk':self.pk})

note:
-----
create the tables by using makemigrations and migrate

admin.py:
---------
from django.contrib import admin 
from testapp.models import Company 
 
 # Register your models here. 
class CompanyAdmin(admin.ModelAdmin): 
	list_display=['name','location','ceo'] 

admin.site.register(Company,CompanyAdmin)

views.py
---------
from django.shortcuts import render 
from testapp.models import Company 
from django.urls import reverse_lazy 
from django.views.generic import ListView,DetailView,CreateView,UpdateView,DeleteView 

# Create your views here. 
class CompanyListView(ListView): 
	model=Company 
	#default template_name is company_list.html 
	#defult context_object_name is company_list
 
class CompanyDetailView(DetailView):
	model=Company 
	#default template_name is company_detail.html 
	#defult context_object_name is company or object

class CompanyCreateView(CreateView):
	model=Company
	fields=('name','location','ceo')

class CompanyUpdateView(UpdateView): 
	model=Company 
	fields=('name','location','ceo')
	success_url=reverse_lazy('companies')

class CompanyDeleteView(DeleteView):
	model=Company
	success_url=reverse_lazy('companies') 

urls.py:
--------

from testapp import views 

urlpatterns = [ 
path('admin/', admin.site.urls), 
path('companies/', views.CompanyListView.as_view(),name='companies'), 
path('<int:pk>/', views.CompanyDetailView.as_view(),name='detail'), 
path('create/', views.CompanyCreateView.as_view(),name='create'), 
path('update/<int:pk>', views.CompanyUpdateView.as_view(),name='update'), 
path('delete/<int:pk>', views.CompanyDeleteView.as_view(),name='delete')
]

project/templates/testapp/all html files create here

base.html:
----------
<!DOCTYPE html> 
<html lang="en" dir="ltr"> 
<head> 
<meta charset="utf-8"> 
<title></title> 
<!-- Latest compiled and minified CSS --> 
<!--<link> here add the bootstrapCDN--> 
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

<body> 

<div class="container" > 
{% block body_block %} 
{% endblock %} 
</div> 
</body> 
</html>

company_list.html
-----------------
<!DOCTYPE html> 
{% extends 'testapp/base.html' %} 
{% block body_block %} 
<h1>List of All Companies</h1><hr> 
<ol> 
{% for company in company_list %} 
<h2><li> <a href="/{{company.id}}">{{company.name|upper}}</a> </li></h2>   
{% endfor %} 
</ol> 
{% endblock %}


company_detail.html:
--------------------
<!DOCTYPE html> 
{% extends 'testapp/base.html' %} 
{% block body_block %} 
<h1>Company Information</h1><hr> 
<ol> 
<h2><li>Company Name: {{company.name|upper}}</li></h2> 
<h2><li>Company Location: {{company.location|title}}</li></h2> 
<h2><li>Company CEO: {{company.ceo|title}}</li></h2> 
</ol> 
<a href="/update/{{company.id}}" class='btn btn-warning'>Update</a> 
<a href="/delete/{{company.id}}" class='btn btn-danger'>Delete</a> 
{% endblock %} 


company_form.html:
------------------
<!DOCTYPE html>
{% extends 'testapp/base.html' %} 
{% block body_block %} 
<h1>Company Create Form</h1><hr> 
<form method="post"> 
{{form.as_p}} 
{% csrf_token %} 
<input type="submit" class='btn btn-primary btn-lg' value="Insert Record"> 
</form> 
{% endblock %}

company_confirm_delete.html:
----------------------------
<!DOCTYPE html> 
{% extends 'testapp/base.html' %} 
{% block body_block %} 
<h1>Delete {{company.name}} ???</h1><hr> 
<form method="post"> 
 {% csrf_token %} 
<input type="submit" class='btn btn-danger' value="Delete Record"> 
<a href="/{{company.id}}" class='btn btn-success'>Cancel</a> 
</form> 
{% endblock %}



