Introduction
-------------
Flask is a web development framework developed in Python. 

Flask provides a development server and a debugger.

It uses Jinja2 templates.

It is working with WSGI 1.0.

It provides integrated support for unit testing.
Many extensions are available for Flask, which can be used to 
enhance its functionalities.


What does “micro” mean?
------------------------

The “micro” in micro framework means Flask aims to keep the core 
simple but extensible. 

Flask won’t make many decisions for you, such as what database to 
use. Those decisions that it does make, such as what templating 
engine to use, are easy to change. 

Everything else is up to you, so that Flask can be everything you need and nothing you don’t.
By default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. 

Instead, Flask supports extensions to add such 
functionality to your application as if it was implemented in Flask 
itself.

Numerous extensions provide database integration, form validation, 
upload handling, various open authentication technologies, and 
more. 

Flask may be “micro”, but it’s ready for production use on a variety of needs.


Why is Flask called a micro-framework?
--------------------------------------
Flask is known as a micro-framework because it is lightweight and
only provides components that are essential. 

It only provides the necessary components for web development, 
such as routing, request handling, sessions, and so on. 

For the other functionalities such as data handling, the developer 
can write a custom module or use an extension.

Install Flask
--------------
$ pip install Flask

what is virtual envirnoment:
----------------------------
A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments


how to install virtual envirnoment using Venv
---------------------------------------------
pip install virtualenv


To use venv in your project, in your terminal, create a new project folder, cd to the project folder in your terminal, and run the following command:

python<version> -m venv <virtual-environment-name>

mkdir projects
cd projects
projects>python -m venv env

how to activate Virtual environment
-------------------------------------
env/Scripts/activate

To deactivate
-------------
~deactivate







Hello world Example:
--------------------
1) Create a folder and name it, You can give any name.

2) In created folder create a module (a python file) and name it, you 
can give any name. Ex : Demo1.py

3) Write the Program into the file as

from flask import Flask
app = Flask(__name__)

@app.route('/')
def wish():
	return "Hello Flask"
	if __name__ == "__main__":
 	app.run()

4) save the module and run the module using command prompt.
5) Open the Command prompt and type the command as
pytthon Demo1.py


Example : python Demo1.py

Serving Flask app "Demo1" (lazy loading)
* Environment: production
WARNING: Do not use the development server in a production 
environment.
Use a production WSGI server instead.
* Debug mode: off

 Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)


6) Open the browser and type the URL as http://127.0.0.1:5000



Program Explanation:
-----------------------
# Importing flask module 
from flask import Flask 

# An object of Flask class is our WSGI application. 
# Flask constructor takes the name of current module (__name__) as argument. 
app = Flask(__name__) 

# The route() function of the Flask class is a decorator which tells 
	the application which URL should call the associated function. 
@app.route('/') 

# ‘/’ URL is bound with wish function. 
def wish(): 
return 'Hello World'

# main driver function 
if __name__ == '__main__': 

# run() method of Flask class runs the application on the local 
development server. 
app.run()

Example to render the Html Text
----------------------------------
from flask import Flask
app = Flask(__name__)

@app.route('/')
def show_html():
	html_text = '''<html>
 	<head>
	<title>Python With Bluey</title>
 	</head>
 	<body>
 	<h1>Welcome to Flask With Bluey</h1>
 	</body>
	</html>'''
 	return html_text

	if __name__ == "__main__":
 		app.run()


Routing:
-------
Use the route() decorator to bind a function to a URL.

@app.route('/')

def index():
 return 'Index Page'

@app.route('/hello')
def hello():
 return 'Hello, World'

Example to render Multiple web pages
-------------------------------------

from flask import Flask
app = Flask(__name__)

@app.route('/one')
def page_one():
 html_text = '''<html>
 <head>
 <title>Python With Bluey</title>
 </head>
 <body>
 <h1>This is Page 1</h1>
 </body>
 </html>'''

return html_text

@app.route('/two')
def page_two():
 html_text = '''<html>
 <head>
 <title>Python With Bluey</title>
 </head>
 <body>
 <h1>This is Page 2</h1>
 </body>
 </html>'''
 return html_text
if __name__ == "__main__":
 app.run()




Variable Rules:
----------------
You can add variable sections to a URL by marking sections with
<variable_name>. 

Your function then receives the <variable_name> as a keyword 
argument. 

Optionally, you can use a converter to specify the type of the 
argument like <converter:variable_name>.

from flask import Flask
app=Flask(__name__)
from markupsafe import escape

@app.route('/user/<username>')
def show_user_profile(username):
	# show the user profile for that user
	return 'User %s' % escape(username)

@app.route('/post/<int:post_id>')
def show_post(post_id):
 # show the post with the given id, the id is an integer
	return 'Post %d' % post_id

@app.route('/path/<path:subpath>')
def show_subpath(subpath):
 # show the subpath after /path/
 	return 'Subpath %s' % escape(subpath)


Converter types:
-----------------
string - (default) accepts any text without a slash
int    - accepts positive integers
float  - accepts positive floating point values
path   - like string but also accepts slashes
uuid   - accepts UUID strings ( Universally unique identifier)




Example on variable in URL
-----------------------------
from flask import Flask
app = Flask(__name__)
@app.route('/<name>')
def wish(name):
 html_text = '''<html>
 <head>
 <title>Python With Bluey</title>
 </head>
 <body>
 <h1>Welcome Mr/Miss : '''+name+'''</h1>
 </body>
</html>'''
 return html_text

if __name__ == "__main__":
 app.run()



Example on variable with type conversion in URL
===============================================
from flask import Flask
app = Flask(__name__)
@app.route('/<name>/<int:age>')
def display_age(name,age):
 if age>=23:
 message = "Welcome Mr/Miss : "+name+" Your age is valid"
 else:
 message = "Welcome Mr/Miss : " + name + " Your age is Invalid"
 html_text = '''<html>
 <head>
 <title>Python With Bluey</title>
 </head>
 <body>
 <h1>''' + message + '''</h1>
 </body>
 </html>'''
 return html_text

if __name__ == "__main__":
 app.run(debug=True)








Rendering Templates
====================

To render a template you can use the render_template() method. 

All you have to do is provide the name of the template and the 
variables you want to pass to the template engine as keyword 
arguments. 

Here’s a simple example of how to render a template:

from flask import render_template
@app.route('/hello/')
@app.route('/hello/<name>')
def hello(name=None):
	return render_template('hello.html', name=name)

Flask will look for templates in the templates folder. 
So if your application is a module, this folder is next to that module, 
if it’s a package it’s actually inside your package


Template Designer:
------------------
The template system provides some HTML syntax which are 
placeholders for variables and expressions that are replaced by their 
actual values when the template is rendered.
The jinga2 template engine provides the following delimiters to 
escape from the HTML.

{% ... %} for statements
{{ ... }} for expressions to print to the template output
{# ... #} for the comments that are not included in the template 

output
# ... ## for line statements

Example 
-------
demo7.py
--------
from flask import Flask
from flask import render_template

app = Flask(__name__)
@app.route('/<name>')
def showIndex(name):
 return render_template("index.html",name=name)
if __name__ == "__main__":
 app.run()

template
----------
<html>
 <head>
 <title>Python With Sai</title>
 </head>
 <body>
 <style>
 h1{
 font-family: "Agency FB";
 font-size: 40px;
 background-color: red;
 color: yellow;
 text-align: center;
 }
 </style>
<h1>Welcome Mr/Miss : {{ name }}</h1>
 </body>
</html>




Static Files
------------
Just create a folder called static in your package or next to your 
module and it will be available at /static on the application.

To generate URLs for static files, use the special 'static' endpoint 
name:

url_for('static', filename='style.css')

The file has to be stored on the filesystem as static/style.css.

from flask import render_template
from flask import Flask
app = Flask(__name__)
@app.route('/open/<name>')
def showtemplate(name):
 return render_template('home.html',name=name)
if __name__ == "__main__":
 app.run(debug=True)

template
-------
<head>
 <link rel="stylesheet" href="{{ url_for('static',filename='example.css')}}">
</head>
<body>
 <h1>Welcome to Templates {{ name }}</h1>
 <a href="http://www.facebook.com">Open Face Book</a>
</body>
</html>

example.css
-----------
h1{
 text-align: center;
 font-size: 60px;
 background-color: blue;
 color: yellow;
 font-family: "Agency FB";
}


Flask DataBase:
===============


What is ORM?
---------------
ORM is short for Object Relation Mapping (sometimes Object Relationship Mapping).

Most programming language platforms are object-oriented.
the data in the RDBMS server is stored in tables.

Object-relational mapping is a technique that maps
object parameters to the structure of a layer RDBMS table. 

The ORM API provides a way to perform CRUD operations without writing raw SQL statements.


Flask SQLAlchemy
---------------- 
the ORM technology of Flask-SQLAlchemy and build a small web application.

Step 1 - Install the Flask-SQLAlchemy extension.

pip install flask-sqlalchemy

Step 2 - You need to import the SQLAlchemy class from this module.

from flask_sqlalchemy import SQLAlchemy

Step 3 - Now create a Flask application object and set the URI for the database to use.

app = Flask (__name__)

app.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'


Restapi withCRUD operation using Flask
--------------------------------------
setting.py
----------

import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# define sqlite database file path 
db_dir = os.path.abspath('data.sqlite')

# app settings 
app = Flask(__name__)
app.config['SECRET_KEY'] = 'you-will-never-guess'
app.config["DEBUG"] = True

# Database connecting for Linux 
#app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////'+db_dir+'?check_same_thread=False'

# Database connecting for Windows
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///'+db_dir
db = SQLAlchemy(app)


model.py
--------
from settings import db
from sqlalchemy import Column, Integer, Text
from datetime import datetime



class User(db.Model):

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(60) )
    email = db.Column(db.String(60))
    password = db.Column(db.String(500))
    mobile_number = db.Column(db.String(300))
    create_at = db.Column(
        db.TIMESTAMP,
        default=datetime.utcnow,
        nullable=False
      )

    def __str__(self):
        return self.name + self.email + str(self.mobile_number)


myapp.py
-------
from flask import (
  Flask, request, jsonify)
from settings import db, app
from models import User


@app.route('/user', methods=['GET'])
def get_all_users():
    """
    this function is map with /user endpoint and 
    it render all user records using GET Http method
    """
    message = {
      'status': 404,
      'message': 'Something went wrong'
    }
    try:
        data = User.query.with_entities(
          User.id, User.name,
          User.email, User.mobile_number,
          User.password).all()
        message.update({
          'status': 200,
          'message': 'ALl records are fetched',
          'data': data
        })
    except:
        pass
    return jsonify(message)


@app.route('/user/<int:id>', methods=['GET'])
def get_specific_user(id):
    """
    this function is map with /user/pk endpoint and 
    it render specific user records with respect to its pk 
    using GET Http method
    """    
    message = {
      'status': 404,
      'message': 'User not exists'
    }
    data = User.query.with_entities(User.id, User.name,
   User.email, User.mobile_number,
      User.password).filter_by(id=id).all()
    if len(data) == 0:
        return jsonify(message)
    message.update({
      'status': 200,
      'message': 'ALl records are fetched',
      'data': data
    })
    return jsonify(message)


@app.route('/user', methods=['POST'])
def create_user():
    """
    this function is map with /user endpoint and 
    it create user records using POST Http method
    """    
    message = {
      'status': 404,
      'message': 'Something went wrong'
      }
    try:
        name = request.form.get('name', '')
        email = request.form.get('email', '')
        password = request.form.get('pwd', '')
        mobile_number = request.form.get('mobile', '')
        user = User(
          name=name,
          email=email,
          password=password,
          mobile_number=mobile_number
        )
        db.session.add(user)
        db.session.commit()
        message.update({
            'status': 201,
            'message': 'User created successfully!!! ',
            'user_id': user.id
        })
    except:
        pass
    resp = jsonify(message)
    return resp


@app.route('/user/<int:id>', methods=['PUT'])
def update_user(id):
    """
    this function is map with /user/pk endpoint and 
    it update specific user records using PUT Http method
    """  
    message = {
      'status': 404,
      'message': 'user not found'
    }
    try:
        new_name = request.form.get('name', None)
        new_email = request.form.get('email', None)
        new_password = request.form.get('pwd', None)
        new_mobile_number = request.form.get('mobile', None)
        try:
            current_user = User.query.get_or_404(id)
        except:
            return jsonify(message)

        if new_email:
            current_user.email = new_email
        if new_name:
            current_user.name = new_name
        if new_password:
            current_user.password = new_password
        if new_mobile_number: 
            current_user.mobile_number = new_mobile_number

        db.session.commit()
        message.update({
          'status': 200,
          'message': 'User details updated successfully!!! '
        })
    except:
        pass
    resp = jsonify(message)
    return resp


@app.route('/user/<int:id>', methods=['DELETE'])
def delete_user(id):
    """
    this function is map with /user/pk endpoint and 
    it delete specific user records using DELETE Http method
    """  
    message = {
      'status': 404,
      'message': 'user not found'
    }
    try:
        current_user = User.query.get_or_404(id)
        db.session.delete(current_user)
        db.session.commit()
        message.update({
          'status': 200,
          'message': 'user record delete successfully!!! '
        })
    except:
        pass
    resp = jsonify(message)
    return resp


if __name__ == "__main__":
    db.create_all()
    app.run(host="0.0.0.0", debug=True)

-----------------------------------------------------------------------------------


dev.app:
--------
from flask import Flask,request,redirect,jsonify
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)

app.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'

db=SQLAlchemy(app)

class Developer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(20))

    def __init__(self, name):
        self.name = name

    def serialize(self):
        return {"id": self.id, 
                "name": self.name}


@app.route('/dev/', methods=['GET'])
def index():
    return jsonify({'developers': list(map(lambda dev: dev.serialize(), Developer.query.all()))})


@app.route('/dev/<int:id>/')
def get_dev(id):
    return jsonify({'developer': Developer.query.get(id).serialize()})


@app.route('/dev/', methods=['POST'])
def create_dev():
    if not request.json or not 'name' in request.json:
        abort(400)
    dev = Developer(request.json['name'])
    db.session.add(dev)
    db.session.commit()
    return jsonify({'developer': dev.serialize()}), 201)


@app.route('/dev/<int:id>/', methods=['DELETE'])
def delete_dev(id):
    db.session.delete(Developer.query.get(id))
    db.session.commit()
    return jsonify({'result': True})


@app.route('/dev/<int:id>/', methods=['PUT'])
def update_dev(id):
    dev = Developer.query.get(id)
    dev.name = request.json.get('name', dev.name)
    db.session.commit()
    return jsonify({'dev': dev.serialize()})


USECASE1:
----------
Exchange the data between two restapi services(Employee) and Department()

code:
-----
import json

from flask import Flask,request,redirect,jsonify
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)

app.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'

db=SQLAlchemy(app)

class Department(db.Model):

    deptno= db.Column(db.Integer, primary_key=True)
    dname = db.Column(db.String(60))
    loc = db.Column(db.String(60))
   
    def serializer(self):
        return {
              "deptno":self.deptno,
              "dname":self.dname,
              "loc":self.loc
               
        }

    def __str__(self):
        return self.dname + self.loc

@app.route('/create',methods=['POST'])
def create_user():
    if request.method=='POST':
       d=request.get_json()

       dpt=Department(
           deptno=d.get('deptno'),
           dname=d.get('dname'),
           loc=d.get('loc'),
       )
       db.session.add(dpt)
       db.session.commit()

       message={
        'data':'Record inserted successfully'
        }
       return jsonify(message) #it will convert your dict to json



@app.route('/list',methods=['GET'])
def list_users():
     dpts=Department.query.all()
     listUser=[]
     for d in dpts:
         listUser.append(d.serializer())

     return jsonify(listUser)

@app.route('/get/<id>',methods=['GET'])
def get_user_by_id(id):
      u=Department.query.get(int(id)).serializer()
      return jsonify(u)

@app.route('/delete/<int:id>',methods=['DELETE'])
def delete_by_id(id):
      u= Department.query.get(id)
      if u is not None:
          db.session.delete(u)
          db.session.commit()
          msg={
               "data":"record is deleted"
          }
      else:
          msg = {
              "data": "Record doesnot exists"
          }
      return jsonify(msg)

@app.route('/update/<int:id>',methods=['PUT'])
def update_user_id(id):
    u = Department.query.get(id)
    #json data from postman
    dname =request.json.get('dname')
    loc =request.json.get('loc')

    #update the data
    u.dname=dname
    u.loc=loc
    

    db.session.add(u)
    db.session.commit()
    return jsonify({"data":"Record is udpated"})



with app.app_context():
    db.create_all() #it will create the tables in database

if __name__=="__main__":
    app.run(debug=True)


emp.py:
-------
import json
import requests
from flask import Flask,request,redirect,jsonify
from flask_sqlalchemy import SQLAlchemy
app = Flask(__name__)

app.config ['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3'

db=SQLAlchemy(app)

class Employee(db.Model):

    empno= db.Column(db.Integer, primary_key=True)
    ename = db.Column(db.String(60))
    sal = db.Column(db.Float)
    deptno=db.Column(db.Integer)
   
    def serializer(self):
        return {
              "empno":self.empno,
              "ename":self.ename,
              "sal":self.sal,
              "deptno":self.deptno
               
        }


@app.route('/create',methods=['POST'])
def create_user():
    if request.method=='POST':
       d=request.get_json()

       dpt=Employee(
           empno=d.get('empno'),
           ename=d.get('ename'),
           sal=d.get('sal'),
           deptno=d.get('deptno')
       )
       db.session.add(dpt)
       db.session.commit()

       message={
        'data':'Record inserted successfully'
        }
       return jsonify(message) #it will convert your dict to json



@app.route('/list',methods=['GET'])
def list_users():
     dpts=Employee.query.all()
     listUser=[]
     for d in dpts:
         listUser.append(d.serializer())

     return jsonify(listUser)

@app.route('/get/<id>',methods=['GET'])
def get_user_by_id(id):
      u=Employee.query.get(int(id))
    
      empDetails=[]
      
      resp=requests.get("http://localhost:5000/get/{}".format(u.deptno))
      dct={"empno":u.empno,"ename":u.ename,"sal":u.sal,"deptno":u.deptno,
           "departname":resp.json().get('dname'),
           "loc":resp.json().get('loc')
        }

      
      print(dct)
      return jsonify(dct)

@app.route('/delete/<int:id>',methods=['DELETE'])
def delete_by_id(id):
      u= Employee.query.get(id)
      if u is not None:
          db.session.delete(u)
          db.session.commit()
          msg={
               "data":"record is deleted"
          }
      else:
          msg = {
              "data": "Record doesnot exists"
          }
      return jsonify(msg)

@app.route('/update/<int:id>',methods=['PUT'])
def update_user_id(id):
    u =Employee.query.get(id)
    #json data from postman
    
    ename =request.json.get('ename')
    sal=request.json.get('sal')
    deptno =request.json.get('deptno')

    #update the data
    u.ename=ename
    u.sal=sal
    u.deptno=deptno
    

    db.session.add(u)
    db.session.commit()
    return jsonify({"data":"Record is udpated"})



with app.app_context():
    db.create_all() #it will create the tables in database

if __name__=="__main__":
    app.run(debug=True,port=8000)



1)create a endpoint url to get the employee data with departments

http://localhost:8000/get/1010  -->it will return empdata(empno,ename,sal,deptno)
				   with departments(dname,loc)	

output:
--------
{
    "department details": {
        "deptno": 20,
        "dname": "accounting",
        "loc": "Newjersey"
    },
    "empno": 1010,
    "ename": "smith",
    "sal": 3000.0
}		

