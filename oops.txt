What is Class:  
 
In Python every thing is an object. To create objects we required some Model or Plan or Blue print, which is nothing but class. 

We can write a class to represent properties (attributes) and actions (behaviour) of object. 
 
Properties can be represented by variables 
Actions can be represented by functions or Methods. 
 
Hence class contains both variables and methods. 
 
How to define a Class? 
We can define a class by using class keyword.  
 
Syntax: 
class className: 
  ''' documenttation string '''  
  
variables:instance variables,static and local variables    
methods: instance methods,static methods,class methods 
 
Documentation string represents description of the class. Within the class doc string is always optional. 

We can get doc string by using the following 2 ways. 
 
1)	print(classname.__doc__) 
2)	help(classname) 
 
Example: 
test.py

class Student:
    ''' this class contain student details'''


print(Student.__doc__)

 
Within the Python class we can represent data by using variables.  
 
There are 3 types of variables are allowed. 
  
1)	Instance Variables (Object Level Variables) 
2)	Static Variables (Class Level Variables) 
3)	Local variables (Method Level Variables) 
 
Within the Python class, we can represent operations by using methods. The following are various types of allowed methods  
 
1)	Instance Methods 
2)	Class Methods  
3)	Static Methods 
  
Example for Class: 

class Student:
    '''this class contain student details'''
    def __init__(self):
        self.name="Ramesh"
        self.rollno=1212
        self.marks=40
        print(self.name)
        print(self.rollno)
        print(self.marks)

s=Student() #creating a object
print(type(s))



What is Object: 
Pysical existence of a class is nothing but object. We can create any number of objects for a class. 
 
Syntax to Create Object: referencevariable = classname() 
 
Example: s = Student() 
 
What is Reference Variable? 
The variable which can be used to refer object is called reference variable. 
By using reference variable, we can access properties and methods of object. 
 
Program: Write a Python program to create a Student class and Creates an object to it. Call the method talk() to display student details 
class Student:
    '''this class contain student details'''
    def __init__(self,name,rollno,marks):
        self.name=name
        self.rollno=rollno
        self.marks=marks
        
         def talk(self):   
         print("Hello My Name is:",self.name)   
         print("My Rollno is:",self.rollno)   
         print("My Marks are:",self.marks)   
    
 s1=Student("Ramesh",101,80)   
s1.talk()

   
Output: 
 
Hello My Name is: Ramesh 
My Rollno is: 101 
My Marks are: 80 


                 
Self Variable: 
===================
self is the default variable which is always pointing to current object (like this keyword in Java) 

By using self we can access instance variables and instance methods of object. 
 
Note: 
1)self should be first parameter inside constructor  def __init__(self): 
2)self should be first parameter inside instance methods def talk(self): 


Constructor Concept: 
=======================
Constructor is a special method in python. 

The name of the constructor should be __init__(self) 
Constructor will be executed automatically at the time of object creation. 

The main purpose of constructor is to declare and initialize instance variables. 
Per object constructor will be exeucted only once. 

Constructor can take atleast one argument(atleast self) 
Constructor is optional and if we are not providing any constructor then python will provide default constructor. 
 
Example:  
 Program to demonistrate Constructor will execute only once per Object: 
 
class Student:
    def __init__(self):
        print("constructor execution)

    def display(self):
        print("method execution)

s=Student()
s1=Stundent()
s2=Stundent()

s.display()


Output 
Constructor exeuction... 
Constructor exeuction... 
Constructor exeuction... 
Method execution... 
 
Program: 


class Student:
    def __init__(self,x,y,z):
	self.name=x
	self.rollno=y
        self.marks=z
        print("constructor execution)

    def display(self):
        print("Student Name:{}\nRollNo:{}\nMarks:{}".format(self.name,self.rollno,self.marks))

s=Student("ramesh",101,80)
s.display()

s1=Student("sunny",102,100)
s1.display()


Output 
Student Name:Ramesh 
Rollno:101 
Marks:80 
 
Student Name:Sunny 
Rollno:102 
Marks:100 
 
Differences between Methods and Constructors	 
Method 	                                              Constructor 
1) Name of method can be any name 	       1) Constructor name should be always __init__ 
2) Method will be executed if we call that method 	2) Constructor will be executed automatically at          								the time of object creation. 
3) Per object, method can be called any number of times. 	3) Per object, Constructor will be executed 										only once 
4) Inside method we can write business logic 
 	                               4) Inside Constructor we have to declare andinitialize instance 													variables 


 
Types of Variables: 
 
Inside Python class 3 types of variables are allowed. 
 
1)	Instance Variables (Object Level Variables) 
2)	Static Variables (Class Level Variables) 
3)	Local variables (Method Level Variables) 
 
1) Instance Variables: 
If the value of a variable is varied from object to object, then such type of variables are called instance variables. 

For every object a separate copy of instance variables will be created. 
 
Where we can declare Instance Variables: 
1)	Inside Constructor by using self variable 
2)	Inside Instance Method by using self variable 
3)	Outside of the class by using object reference variable 
 
1)	Inside Constructor by using Self Variable: 
We can declare instance variables inside a constructor by using self keyword. Once we creates object, automatically these variables will be added to the object. 
 
 
Output:  {'eno': 100, 'ename': 'Durga', 'esal': 10000} 
 
2)	Inside Instance Method by using Self Variable: 
We can also declare instance variables inside instance method by using self variable. If any instance variable declared inside instance method, that instance variable will be added once we call taht method. 
 
 
3)	Outside of the Class by using Object Reference Variable: 
We can also add instance variables outside of a class to a particular object. 
 
How to Access Instance Variables: 
We can access instance variables with in the class by using self variable and outside of the class by using object reference. 


class Employee:
   
    def __init__(self,eno,ename,esal):
         self.eno=eno
         self.ename=ename
         self.esal=esal

    def display(self):
         self.address="boston"
         print("EMployee details are :")
         print("EmployeNo is : {} \n EMployee Name is {} \n Employee Sal is                   			{}".format(self.eno,self.ename,self.esal))

e=Employee(1001,"smith",4000)

e.display()


How to delete Instance Variable from the Object: 
=================================================
1)Within a class we can delete instance variable as follows          
      del self.variableName 
 
2)From outside of class we can delete instance variables as follows   
       del objectreference.variableName 

class Test: 
	def __init__(self): 
 		self.a=10 
 		self.b=20 
 		self.c=30 
 		self.d=40 

 	def m1(self): 
  		del self.d 
 
  t=Test() 
  print(t.__dict__) 
  t.m1() 
  print(t.__dict__) 
  del t.c #outside the class
  print(t.__dict__)
 
Output 
{'a': 10, 'b': 20, 'c': 30, 'd': 40} 
{'a': 10, 'b': 20, 'c': 30} 
{'a': 10, 'b': 20} 
 

Note: The instance variables which are deleted from one object,
       will not be deleted from other objects.

class Test: 
   def __init__(self): 
   self.a=10 
   self.b=20 
   self.c=30 
   self.d=40 

t1=Test() 
t2=Test() 
del t1.a 

print(t1.__dict__) 
print(t2.__dict__)  
 
{'b': 20, 'c': 30, 'd': 40} 
{'a': 10, 'b': 20, 'c': 30, 'd': 40} 


 
If we change the values of instance variables of one object then those changes won't be reflected to the remaining objects, because for every object we are separate copy of instance variables are available. 
 
class Test: 
 def __init__(self): 
 self.a=10 
 self.b=20 

t1=Test() 
t1.a=888 
t1.b=999 

t2=Test() 
print('t1:',t1.a,t1.b) 
print('t2:',t2.a,t2.b)

Output 
t1: 888 999 
t2: 10 20 


Static Variables: 
===================
If the value of a variable is not varied from object to object, such type of variables we have to declare with in the class directly but outside of methods. Such types of variables are called Static variables. 

For total class only one copy of static variable will be created and shared by all objects of that class. 

We can access static variables either by class name or by object reference. 
But recommended to use class name. 
 
Instance Variable vs Static Variable: 
Note: In the case of instance variables for every object a seperate copy will be created,but in the case of static variables for total class only one copy will be created and shared by every object of that class. 

class Test: 
   x=10 
  
   def __init__(self): 
    self.y=20 

t1=Test() 
t2=Test() 

print('t1:',t1.x,t1.y) 
print('t2:',t2.x,t2.y) 

Test.x=888 
t1.y=999 

print('t1:',t1.x,t1.y) 
print('t2:',t2.x,t2.y)
 
Output 
t1: 10 20 
t2: 10 20 
t1: 888 999
 t2: 888 20  

Various Places to declare Static Variables: 
1)In general we can declare within the class directly but from out side of any method 
2)Inside constructor by using class name 
3)Inside instance method by using class name 
4)Inside classmethod by using either class name or cls variable (@classmethod)
5)Inside static method by using class name (@staticmethod)

class Test:   
     a=10   
    def __init__(self):   
         Test.b=20   
    def m1(self):   
     Test.c=30   

   @classmethod   
    def m2(cls):   
         cls.d1=40   
        Test.d2=400  
 
  @staticmethod   
   def m3():   
   Test.e=50   
 
print(Test.__dict__)   
t=Test()   
print(Test.__dict__)   
t.m1()   
print(Test.__dict__)   
Test.m2()   #calling class method
print(Test.__dict__)   
Test.m3()   #calling static method
print(Test.__dict__)   
Test.f=60    #creating static variable outside the class using className
print(Test.__dict__) 




  
How to access Static Variables: 
1)inside constructor: by using either self or classname 
2)inside instance method:  by using either self or classname 
3)inside class method: by using either cls variable or classname 
4)inside static method: by using classname 
5)From outside of class: by using either object reference or classname 
 
class Test: 
   a=10 
  def __init__(self): 
   print(self.a) 
   print(Test.a) 

 def m1(self): 
   print(self.a) 
   print(Test.a) 

@classmethod 
  def m2(cls): 
     print(cls.a) 
     print(Test.a) 

@staticmethod 
   def m3(): 
   print(Test.a) 

t=Test() 
print(Test.a) 
print(t.a) 
t.m1() 
t.m2() 
t.m3()




Where we can modify the Value of Static Variable: 
Anywhere either with in the class or outside of class we can modify by using classname.
 But inside class method, by using cls variable. 
 
class Test: 
 a=777 

  @classmethod 
  def m1(cls): 
   cls.a=888 
  
   @staticmethod 
   def m2(): 
   Test.a=999 
   
print(Test.a) 
Test.m1() 
print(Test.a) 
Test.m2() 
print(Test.a)
#t.a=4343



777 
888 
999 
 
***** 
If we change the Value of Static Variable by using either self OR
Object Reference Variable:	 
If we change the value of static variable by using either self or object reference variable, then the value of static variable won't be changed, just a new instance variable with that name will be added to that particular object. 
 
class Test: 
2) a=10 
3) def m1(self): 
4) self.a=888
 t1=Test() 
6) t1.m1() 
7) print(Test.a) 
8) print(t1.a) 



  
Output 
10
888 
 
1) class Test: 
2) x=10 
3) def __init__(self): 
4) self.y=20 
5) 
6) t1=Test() 
7) t2=Test() 
8) print('t1:',t1.x,t1.y) 
9) print('t2:',t2.x,t2.y) 
10)t1.x=888 
11)t1.y=999 
12) print('t1:',t1.x,t1.y) 
13) print('t2:',t2.x,t2.y) 
Output
t1: 10 20
t2: 10 20
t1: 888 999
t2: 10 20
888 20 
 
 
class Test: 
2) a=10 
3) def __init__(self): 
4) self.b=20 
5) t1=Test() 
6) t2=Test() 
7) Test.a=888 
8) t1.b=999 
9) print(t1.a,t1.b) 
10) print(t2.a,t2.b) 
Output
888 999
888 20

 
 
How to Delete Static Variables of a Class: 
1)We can delete static variables from anywhere by using the following 
  syntax del   classname.variablename 
 
2)But inside classmethod we can also use cls variable 
del   cls.variablename 
 
Example:  
****Note:  
By using object reference variable/self we can read static variables, but we cannot modify or delete. 
If we are trying to modify, then a new instance variable will be added to that particular object. 
t1.a = 70 
If we are trying to delete then we will get error. 
  
Example: 
 
We can modify or delete static variables only by using classname or cls variable. 




import sys   
class Customer:   
	''' Customer class with bank operations.. '''   
     bankname='BlueYBANK'   
     def __init__(self,name,balance=0.0):   
     self.name=name   
     self.balance=balance   
    
    def deposit(self,amt):   
	self.balance=self.balance+amt   
	print('Balance after deposit:',self.balance)   
   
    def withdraw(self,amt):   
       if amt>self.balance:   
       		print('Insufficient Funds..cannot perform this operation')   
         	sys.exit() 
       self.balance=self.balance-amt   
       print('Balance after withdraw:',self.balance)  
 
print('Welcome to',Customer.bankname)   
name=input('Enter Your Name:')   
c=Customer(name)
 
while True:   
	print('d-Deposit \nw-Withdraw \ne-exit') 
	option=input('Choose your option:')   
	if option=='d' or option=='D':   
		amt=float(input('Enter amount:'))   
		c.deposit(amt)   
	elif option=='w' or option=='W':   
		amt=float(input('Enter amount:'))   
		c.withdraw(amt)   
	elif option=='e' or option=='E':   
		print('Thanks for Banking')   
		sys.exit()   
	else:   
	print('Invalid option..Plz choose valid option')   

Output: 

py test.py 
Welcome to RameshBANK Enter Your Name:Ramesh d-Deposit w-Withdraw 
e-exit 
 
Choose your option:d 
Enter amount:10000 Balance after deposit: 10000.0 d-Deposit w-Withdraw 
e-exit 
 
Choose your option:d 
Enter amount:20000 Balance after deposit: 30000.0 d-Deposit w-Withdraw 
e-exit 
 
Choose your option:w 
Enter amount:2000 Balance after withdraw: 28000.0 d-Deposit w-Withdraw 
e-exit 
 
Choose your option:r Invalid option..Plz choose valid option d-Deposit w-Withdraw 
e-exit 
 
Choose your option:e 
Thanks for Banking 




 
Local Variables: 
==================
We can declare variables inside a method directly,such type of variables are called local variable or temporary variables. 

Local variables will be created at the time of method execution and destroyed once method completes. 
Local variables of a method cannot be accessed from outside of method. 
 
Ex:
===
class Test: 

 def m1(self): 
   a=1000   #local variable
   print(a) 
 def m2(self): 
  b=2000    #local variable
  print(b) 
 

t=Test() 
t.m1() 
t.m2() 
 
Ex:2
-----
class Test: 
	def m1(self): 
		a=1000 
		print(a) 
	def m2(self): 
		b=2000 
		print(a) #NameError: name 'a' is not defined 
		print(b) 


t=Test() 
t.m1() 
t.m2()



Types of Methods:
Inside Python class 3 types of methods are allowed
1) Instance Methods
2) Class Methods
3) Static Methods

1)Instance Methods:
==================
Inside method implementation if we are using instance variables then such type of 
methods are called instance methods. 
 Inside instance method declaration, we have to pass self variable. 
def m1(self):
 By using self variable inside method we can able to access instance variables.
Within the class we can call instance method by using self variable and from outside of 
the class we can call by using object reference.

ex:
class Student: 

def __init__(self,name,marks): 
  self.name=name 
  self.marks=marks 

def display(self): 
   print('Hi',self.name) 
   print('Your Marks are:',self.marks) 

def grade(self): 
  if self.marks>=60: 
  	print('You got First Grade') 
  elif self.marks>=50: 
  	print('Yout got Second Grade') 
  elif self.marks>=35: 
  	print('You got Third Grade') 
  else: 
  	print('You are Failed') 

n=int(input('Enter number of students:')) 
for i in range(n): 
	name=input('Enter Name:') 
  	marks=int(input('Enter Marks:')
  	s= Student(name,marks) 
	s.display() 
	s.grade() 
	print()



Class Methods:
===============
Inside method implementation if we are using only class variables (static variables), 
then such type of methods we should declare as class method.

We can declare class method explicitly by using @classmethod decorator. 

For class method we should provide cls variable at the time of declaration
We can call classmethod by using classname or object reference variable

ex:
class Animal: 
 	legs=4 
 	@classmethod 
 	def walk(cls,name): 
 		print('{} walks with {} legs...'.format(name,cls.legs)) 


Animal.walk('Dog') 
Animal.walk('Cat') 


Program to track the Number of Objects created for a Class:
===========================================================
class Test: 
	count=0 
	def __init__(self): 
		Test.count =Test.count+1 

	@classmethod 
	def noOfObjects(cls): 
		print('The number of objects created for test class:',cls.count) 
 
t1=Test() 
t2=Test() 
Test.noOfObjects() 
t3=Test() 
t4=Test() 
t5=Test() 
Test.noOfObjects()




Static Methods:
================
In general these methods are general utility methods.
Inside these methods we won't use any instance or class variables.
Here we won't provide self or cls arguments at the time of declaration.
We can declare static method explicitly by using @staticmethod decorator
We can access static methods by using classname or object reference

Ex:
===

class Test: 

	@staticmethod 
	def add(x,y): 
		print('The Sum:',x+y)
	
	@staticmethod 
	def product(x,y): 
		print('The Product:',x*y) 
 
	@staticmethod 
	def average(x,y): 
		print('The average:',(x+y)/2) 

t1=Test()

t1.add(10,50)
t1.product(50,30)
t1.average(40,40)



Note:
=====
In general we can use only instance and static methods.
Inside static method we can access class level variables by using class name.

Class methods are most rarely used methods in python.




Garbage Collection
==================
In old languages like C++, programmer is responsible for both creation and destruction 
of objects.Usually programmer taking very much care while creating object, but 
nEglecting destruction of useless objects. 

Because of his nEglectance, total memory 
can be filled with useless objects which creates memory problems and total 
application will be down with Out of memory error.

But in Python, We have some assistant which is always running in the background to 
destroy useless objects.Because this assistant the chance of failing Python program 
with memory problems is very less. This assistant is nothing but Garbage Collector.

Hence the main objective of Garbage Collector is to destroy useless objects.

If an object does not have any reference variable then that object eligible for Garbage 
Collection.

How to enable and disable Garbage Collector in our Program:
By default Gargbage collector is enabled, but we can disable based on our requirement. 
In this context we can use the following functions of gc module.

 gc.isenabled()  Returns True if GC enabled
 gc.disable() To disable GC explicitly
 gc.enable() To enable GC explicitly

import gc 
print(gc.isenabled()) 
gc.disable() 
print(gc.isenabled()) 
gc.enable() 
print(gc.isenabled())


Destructors:
============
Destructor is a special method and the name should be __del__

Just before destroying an object Garbage Collector always calls destructor to perform 
clean up activities (Resource deallocation activities like close database connection etc).

Once destructor execution completed then Garbage Collector automatically destroys 
that object.

Note: 
=====
The job of destructor is not to destroy object and it is just to perform clean up 
activities.

 import time 
 class Test: 
	def __init__(self): 
		print("Object Initialization...") 
	def __del__(self): 
	print("Fulfilling Last Wish and performing clean up activities...") 
 
t1=Test() 
t1=None 
time.sleep(5) 
print("End of application")



Passing Members of One Class to Another Class:
===============================================
We can access members of one class inside another class.

class Employee: 
	def __init__(self,eno,ename,esal): 
		self.eno=eno 
		self.ename=ename 
		self.esal=esal 

	def display(self): 
		print('Employee Number:',self.eno) 
		print('Employee Name:',self.ename) 
		print('Employee Salary:',self.esal) 

class Test: 

        @staticmethod
	def modify(emp): 
		emp.esal=emp.esal+10000 
		emp.display() 


e=Employee(100,'VAMSHI',10000) 

Test.modify(e)

Exercise:
==========
1. Write a Python program to create a person class. Include attributes  like name, country and date of birth. Implement a method to  determine the person’s age. 

Create a class Person with calculate_age 

The output of the program:

 Person :1
 Name    : Abhitabh bachan
 country : Maharashtra
 Date of birth :1961-11-12
 Age : ----


2.Write a Python program to create a class representing a shopping cart. 
Include methods for adding and removing items, and calculating the total price. 

Solution: Create a class named as ShoppingCart with functions add_item,remove_item, and  calculate_total.

The output of the program:

Current Items in cart:
papya -100
Guava -200
Orange -150
Total Quantity: 450

Updated Item in Cart after removing orange
papaya -100
Guava -200
Total Quantity:300







